I am designing a website to centralize the business reporting for a company. It will be a place for managers to go in and find reports. They can also request reports. There should be a data catalog functionality. Design a website like that for me that which bring the most values to the managers and c-suite users.


File: ./app/requests/[id].tsx
import { useParams } from "next/navigation";
import React, { useEffect, useState } from "react";
import CommunicationThread from "./../../components/CommunicationThread";

interface Request {
  id: number;
  reportType: string;
  status: string;
  description: string;
  statusHistory?: Array<{
    status: string;
    timestamp: string;
    note?: string;
  }>;
}

const RequestDetails = () => {
  const params = useParams();
  const id = params?.id
    ? Array.isArray(params.id)
      ? parseInt(params.id[0], 10)
      : parseInt(params.id, 10)
    : null;
  const [request, setRequest] = useState<Request | null>(null);
  const [statusHistory, setStatusHistory] = useState<
    NonNullable<Request["statusHistory"]>
  >([]);

  useEffect(() => {
    if (id) {
      const fetchRequest = async () => {
        try {
          const response = await fetch(`/api/requests/${id}`);
          if (response.ok) {
            const data: Request = await response.json();
            setRequest(data);
            setStatusHistory(data.statusHistory || []);
          } else {
            console.error("Failed to fetch request");
          }
        } catch (error) {
          console.error("Error fetching request:", error);
        }
      };

      fetchRequest();
    }
  }, [id]);

  if (!request) {
    return <div>Loading...</div>;
  }

  return (
    <div className="min-h-screen p-8 bg-gray-900 text-gray-100">
      <h1 className="text-3xl font-bold mb-4">Request Details</h1>
      <div className="mb-6">
        <p>
          <strong>ID:</strong> {request.id}
        </p>
        <p>
          <strong>Report Type:</strong> {request.reportType}
        </p>
        <p>
          <strong>Status:</strong> {request.status}
        </p>
        <p>
          <strong>Description:</strong> {request.description}
        </p>
      </div>

      {/* Status History */}
      <div className="mb-6">
        <h2 className="text-2xl font-semibold mb-2">Status History</h2>
        <ul className="list-disc pl-5">
          {statusHistory.map((statusUpdate, index) => (
            <li key={index}>
              <p>
                <strong>{statusUpdate.status}</strong> -{" "}
                {new Date(statusUpdate.timestamp).toLocaleString()}
              </p>
              {statusUpdate.note && <p>{statusUpdate.note}</p>}
            </li>
          ))}
        </ul>
      </div>

      {/* Communication Thread */}
      {request && <CommunicationThread requestId={request.id} />}
    </div>
  );
};

export default RequestDetails;


File: ./app/dashboard/page.tsx
import React from "react";
import StatusDashboard from "../../components/StatusDashboard";
import CommunicationThread from "../../components/CommunicationThread";
import SummaryMetrics from "../../components/SummaryMetrics";
import QuickAccess from "../../components/QuickAccess";

const DashboardPage: React.FC = () => {
  return (
    <div className="min-h-screen p-8">
      <h1 className="text-3xl font-bold mb-6">Executive Dashboard</h1>
      <SummaryMetrics />
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mt-8">
        <div className="lg:col-span-2">
          <StatusDashboard />
        </div>
        <div>
          <QuickAccess />
          <CommunicationThread />
        </div>
      </div>
    </div>
  );
};

export default DashboardPage;


File: ./app/layout.tsx
import React from "react";
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import Navbar from "../components/Navbar";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Navbar />
        {children}
      </body>
    </html>
  );
}


File: ./app/api/metrics/route.ts
import { NextResponse } from "next/server";
import fs from "fs";
import path from "path";

const dataFilePath = path.join(process.cwd(), "data", "requests.json");

export async function GET() {
  try {
    const fileData = fs.readFileSync(dataFilePath, "utf8");
    const requests = JSON.parse(fileData);

    const totalReports = requests.length;
    const pendingRequests = requests.filter(
      (req) => req.status === "Submitted"
    ).length;

    const completedThisMonth = requests.filter((req) => {
      const completed = req.status === "Completed";
      if (completed) {
        const requestDate = new Date(req.id);
        const now = new Date();
        return (
          requestDate.getMonth() === now.getMonth() &&
          requestDate.getFullYear() === now.getFullYear()
        );
      }
      return false;
    }).length;

    const averageTurnaroundTime = "N/A"; // Implement calculation if needed

    const metrics = [
      { label: "Total Reports", value: totalReports },
      { label: "Pending Requests", value: pendingRequests },
      { label: "Completed This Month", value: completedThisMonth },
      { label: "Average Turnaround Time", value: averageTurnaroundTime },
    ];

    return NextResponse.json(metrics);
  } catch (error) {
    console.error("Error calculating metrics:", error);
    return NextResponse.error();
  }
}


File: ./app/api/requests/route.ts
import { NextResponse } from "next/server";
import fs from "fs";
import path from "path";

const dataFilePath = path.join(process.cwd(), "data", "requests.json");

export async function GET() {
  try {
    const fileData = fs.readFileSync(dataFilePath, "utf8");
    const requests = JSON.parse(fileData);
    return NextResponse.json(requests);
  } catch (error) {
    console.error("Error reading requests:", error);
    return NextResponse.error();
  }
}

export async function PUT(request: Request) {
  try {
    const { id, status, note } = await request.json();
    const fileData = fs.readFileSync(dataFilePath, "utf8");
    const requests = JSON.parse(fileData);

    const requestIndex = requests.findIndex((req) => req.id === id);
    if (requestIndex === -1) {
      return NextResponse.json(
        { message: "Request not found" },
        { status: 404 }
      );
    }

    requests[requestIndex].status = status;
    const statusUpdate = {
      status,
      timestamp: new Date().toISOString(),
      note: note || "",
    };
    requests[requestIndex].statusHistory =
      requests[requestIndex].statusHistory || [];
    requests[requestIndex].statusHistory.push(statusUpdate);

    fs.writeFileSync(dataFilePath, JSON.stringify(requests, null, 2));

    return NextResponse.json(requests[requestIndex]);
  } catch (error) {
    console.error("Error handling PUT request:", error);
    return NextResponse.error();
  }
}


File: ./app/api/requests/[id]/messages/route.ts
// File: ./app/api/requests/[id]/messages/route.ts
import { NextResponse } from "next/server";
import fs from "fs";
import path from "path";

const dataFilePath = path.join(process.cwd(), "data", "requests.json");

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const fileData = fs.readFileSync(dataFilePath, "utf8");
    const requests = JSON.parse(fileData);
    const req = requests.find((r: any) => r.id === parseInt(params.id, 10));

    if (req) {
      return NextResponse.json(req.messages || []);
    } else {
      return NextResponse.json(
        { message: "Request not found" },
        { status: 404 }
      );
    }
  } catch (error) {
    console.error("Error reading messages:", error);
    return NextResponse.error();
  }
}

export async function POST(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const { sender, content } = await request.json();
    const fileData = fs.readFileSync(dataFilePath, "utf8");
    const requests = JSON.parse(fileData);

    const requestIndex = requests.findIndex(
      (req) => req.id === parseInt(params.id, 10)
    );
    if (requestIndex === -1) {
      return NextResponse.json(
        { message: "Request not found" },
        { status: 404 }
      );
    }

    const newMessage = {
      sender,
      content,
      timestamp: new Date().toISOString(),
    };

    requests[requestIndex].messages = requests[requestIndex].messages || [];
    requests[requestIndex].messages.push(newMessage);

    fs.writeFileSync(dataFilePath, JSON.stringify(requests, null, 2));

    return NextResponse.json(newMessage, { status: 201 });
  } catch (error) {
    console.error("Error adding message:", error);
    return NextResponse.error();
  }
}


File: ./app/api/requests/[id]/route.ts
// File: ./app/api/requests/[id]/route.ts
import { NextResponse } from "next/server";
import fs from "fs";
import path from "path";

const dataFilePath = path.join(process.cwd(), "data", "requests.json");

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const fileData = fs.readFileSync(dataFilePath, "utf8");
    const requests = JSON.parse(fileData);
    const req = requests.find((r: any) => r.id === parseInt(params.id, 10));

    if (req) {
      return NextResponse.json(req);
    } else {
      return NextResponse.json(
        { message: "Request not found" },
        { status: 404 }
      );
    }
  } catch (error) {
    console.error("Error reading request:", error);
    return NextResponse.error();
  }
}


File: ./app/api/reports/sales/route.ts
// File: ./app/api/reports/sales/route.ts
import { NextResponse } from "next/server";
import fs from "fs";
import path from "path";

const dataFilePath = path.join(process.cwd(), "data", "salesReports.json");

export async function GET() {
  try {
    const fileData = fs.readFileSync(dataFilePath, "utf8");
    const salesReports = JSON.parse(fileData);
    return NextResponse.json(salesReports);
  } catch (error) {
    console.error("Error reading sales reports:", error);
    return NextResponse.error();
  }
}


File: ./app/api/reports/sales/[id]/route.ts
// File: ./app/api/reports/sales/[id]/route.ts
import { NextResponse } from "next/server";
import fs from "fs";
import path from "path";

const dataFilePath = path.join(process.cwd(), "data", "salesReports.json");

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const fileData = fs.readFileSync(dataFilePath, "utf8");
    const salesReports = JSON.parse(fileData);
    const report = salesReports.find(
      (r: any) => r.id === parseInt(params.id, 10)
    );

    if (report) {
      return NextResponse.json(report);
    } else {
      return NextResponse.json(
        { message: "Report not found" },
        { status: 404 }
      );
    }
  } catch (error) {
    console.error("Error reading sales report:", error);
    return NextResponse.error();
  }
}


File: ./app/api/reports/operations/route.ts
import { NextResponse } from "next/server";
import fs from "fs";
import path from "path";

const dataFilePath = path.join(process.cwd(), "data", "operationsReports.json");

export async function GET() {
  try {
    const fileData = fs.readFileSync(dataFilePath, "utf8");
    const operationsReports = JSON.parse(fileData);
    return NextResponse.json(operationsReports);
  } catch (error) {
    console.error("Error reading operations reports:", error);
    return NextResponse.error();
  }
}


File: ./app/api/reports/operations/[id]/route.ts
// app/api/reports/operations/[id]/route.ts
import { NextResponse } from "next/server";
import fs from "fs";
import path from "path";

const dataFilePath = path.join(process.cwd(), "data", "operationsReports.json");

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const fileData = fs.readFileSync(dataFilePath, "utf8");
    const operationsReports = JSON.parse(fileData);
    const report = operationsReports.find(
      (r: any) => r.id === parseInt(params.id, 10)
    );

    if (report) {
      return NextResponse.json(report);
    } else {
      return NextResponse.json(
        { message: "Report not found" },
        { status: 404 }
      );
    }
  } catch (error) {
    console.error("Error reading operations report:", error);
    return NextResponse.error();
  }
}


File: ./app/api/reports/finance/route.ts
import { NextResponse } from "next/server";
import fs from "fs";
import path from "path";

const dataFilePath = path.join(process.cwd(), "data", "financeReports.json");

export async function GET() {
  try {
    const fileData = fs.readFileSync(dataFilePath, "utf8");
    const financeReports = JSON.parse(fileData);
    return NextResponse.json(financeReports);
  } catch (error) {
    console.error("Error reading finance reports:", error);
    return NextResponse.error();
  }
}


File: ./app/api/reports/finance/[id]/route.ts
import { NextResponse } from "next/server";
import fs from "fs";
import path from "path";

const dataFilePath = path.join(process.cwd(), "data", "financeReports.json");

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const fileData = fs.readFileSync(dataFilePath, "utf8");
    const financeReports = JSON.parse(fileData);
    const report = financeReports.find(
      (r: any) => r.id === parseInt(params.id, 10)
    );

    if (report) {
      return NextResponse.json(report);
    } else {
      return NextResponse.json(
        { message: "Report not found" },
        { status: 404 }
      );
    }
  } catch (error) {
    console.error("Error reading finance report:", error);
    return NextResponse.error();
  }
}


File: ./app/request/page.tsx
"use client";

import React from "react";
import { useState } from "react";
import RequestForm from "../../components/RequestForm";
import TemplateGallery from "../../components/TemplateGallery";

const RequestPage = () => {
  const [selectedTemplate, setSelectedTemplate] = useState(null);

  const handleSelectTemplate = (templateFields) => {
    setSelectedTemplate(templateFields);
  };

  return (
    <div className="min-h-screen p-8">
      <h1 className="text-3xl font-bold mb-6">Submit a New Request</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <RequestForm prefillData={selectedTemplate} />
        <TemplateGallery onSelectTemplate={handleSelectTemplate} />
      </div>
    </div>
  );
};

export default RequestPage;


File: ./app/page.tsx
import { NextPage } from "next";
import Link from "next/link";

const Home: NextPage = () => {
  return (
    <div className="min-h-screen bg-gray-900">
      <header className="bg-blue-800 text-white py-20 text-center">
        <h1 className="text-5xl font-bold mb-4">Executive Reporting Hub</h1>
        <p className="text-xl mb-8">
          Streamline your reporting process and make data-driven decisions
        </p>
        <Link
          href="/request"
          className="px-8 py-3 bg-white text-blue-600 rounded-full text-lg font-semibold hover:bg-blue-100 transition duration-300"
        >
          Get Started
        </Link>
      </header>

      <main className="container mx-auto py-16">
        <section className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
          <div className="bg-gray-800 p-6 rounded shadow-md text-gray-100">
            <h2 className="text-2xl font-bold mb-4">Centralized Reporting</h2>
            <p>
              Access all your reports in one place, saving time and improving
              efficiency.
            </p>
          </div>
          <div className="bg-gray-800 p-6 rounded shadow-md text-gray-100">
            <h2 className="text-2xl font-bold mb-4">Real-time Updates</h2>
            <p>
              Stay informed with live status updates on your report requests.
            </p>
          </div>
          <div className="bg-gray-800 p-6 rounded shadow-md text-gray-100">
            <h2 className="text-2xl font-bold mb-4">Data Visualization</h2>
            <p>Gain insights quickly with our interactive charts and graphs.</p>
          </div>
        </section>

        <section className="text-center">
          <h2 className="text-3xl font-bold mb-8">
            Ready to streamline your reporting process?
          </h2>
          <div className="space-x-4">
            <Link
              href="/request"
              className="px-6 py-3 bg-blue-500 text-white rounded shadow hover:bg-blue-600 transition duration-300"
            >
              Submit a New Request
            </Link>
            <Link
              href="/dashboard"
              className="px-6 py-3 bg-green-500 text-white rounded shadow hover:bg-green-600 transition duration-300"
            >
              View Dashboard
            </Link>
          </div>
        </section>
      </main>

      <footer className="bg-gray-800 text-white py-8 text-center">
        <p>
          &copy; {new Date().getFullYear()} Executive Reporting Hub. All rights
          reserved.
        </p>
      </footer>
    </div>
  );
};

export default Home;


File: ./app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}


File: ./app/reports/sales/[id]/page.tsx
// File: ./app/reports/sales/[id]/page.tsx
"use client";

import { useParams } from "next/navigation";
import React, { useEffect, useState } from "react";

interface SalesReport {
  id: number;
  title: string;
  date: string;
  content: string;
}

const SalesReportDetails: React.FC = () => {
  const params = useParams();
  const { id } = params;
  const [report, setReport] = useState<SalesReport | null>(null);

  useEffect(() => {
    const fetchReport = async () => {
      try {
        const response = await fetch(`/api/reports/sales/${id}`);
        if (response.ok) {
          const data = await response.json();
          setReport(data);
        } else {
          console.error("Failed to fetch sales report");
        }
      } catch (error) {
        console.error("Error fetching sales report:", error);
      }
    };

    if (id) {
      fetchReport();
    }
  }, [id]);

  if (!report) {
    return <div>Loading report...</div>;
  }

  return (
    <div className="min-h-screen p-8 bg-gray-900 text-gray-100">
      <h1 className="text-3xl font-bold mb-4">{report.title}</h1>
      <p className="text-sm text-gray-400 mb-2">
        {new Date(report.date).toLocaleDateString()}
      </p>
      <div className="prose">{report.content}</div>
    </div>
  );
};

export default SalesReportDetails;


File: ./app/reports/sales/page.tsx
// File: ./app/reports/sales/page.tsx
"use client";

import React, { useEffect, useState } from "react";
import Link from "next/link";

interface SalesReport {
  id: number;
  title: string;
  date: string;
  summary: string;
}

const SalesReportsPage: React.FC = () => {
  const [reports, setReports] = useState<SalesReport[]>([]);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    const fetchReports = async () => {
      try {
        const response = await fetch("/api/reports/sales");
        if (response.ok) {
          const data = await response.json();
          setReports(data);
        } else {
          console.error("Failed to fetch sales reports");
        }
      } catch (error) {
        console.error("Error fetching sales reports:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchReports();
  }, []);

  if (loading) {
    return <div>Loading sales reports...</div>;
  }

  return (
    <div className="min-h-screen p-8 bg-gray-900 text-gray-100">
      <h1 className="text-3xl font-bold mb-6">Sales Reports</h1>
      {reports.length === 0 ? (
        <p>No sales reports available.</p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {reports.map((report) => (
            <div
              key={report.id}
              className="p-4 bg-gray-800 rounded shadow text-gray-100"
            >
              <h2 className="text-xl font-semibold mb-2">{report.title}</h2>
              <p className="text-sm text-gray-400 mb-2">
                {new Date(report.date).toLocaleDateString()}
              </p>
              <p>{report.summary}</p>
              <Link
                href={`/reports/sales/${report.id}`}
                className="text-blue-500 hover:underline mt-2 block"
              >
                View Full Report
              </Link>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default SalesReportsPage;


File: ./app/reports/operations/[id]/page.tsx
// File: ./app/reports/operations/[id]/page.tsx
"use client";

import { useParams } from "next/navigation";
import React, { useEffect, useState } from "react";

interface OperationsReport {
  id: number;
  title: string;
  date: string;
  content: string;
}

const OperationsReportDetails: React.FC = () => {
  const params = useParams();
  const { id } = params;
  const [report, setReport] = useState<OperationsReport | null>(null);

  useEffect(() => {
    const fetchReport = async () => {
      try {
        const response = await fetch(`/api/reports/operations/${id}`);
        if (response.ok) {
          const data = await response.json();
          setReport(data);
        } else {
          console.error("Failed to fetch operations report");
        }
      } catch (error) {
        console.error("Error fetching operations report:", error);
      }
    };

    if (id) {
      fetchReport();
    }
  }, [id]);

  if (!report) {
    return <div>Loading report...</div>;
  }

  return (
    <div className="min-h-screen p-8 bg-gray-900 text-gray-100">
      <h1 className="text-3xl font-bold mb-4">{report.title}</h1>
      <p className="text-sm text-gray-400 mb-2">
        {new Date(report.date).toLocaleDateString()}
      </p>
      <div className="prose">{report.content}</div>
    </div>
  );
};

export default OperationsReportDetails;


File: ./app/reports/operations/page.tsx
// File: ./app/reports/operations/page.tsx
"use client";

import React, { useEffect, useState } from "react";
import Link from "next/link";

interface OperationsReport {
  id: number;
  title: string;
  date: string;
  summary: string;
}

const OperationsReportsPage: React.FC = () => {
  const [reports, setReports] = useState<OperationsReport[]>([]);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    const fetchReports = async () => {
      try {
        const response = await fetch("/api/reports/operations");
        if (response.ok) {
          const data = await response.json();
          setReports(data);
        } else {
          console.error("Failed to fetch operations reports");
        }
      } catch (error) {
        console.error("Error fetching operations reports:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchReports();
  }, []);

  if (loading) {
    return <div>Loading operations reports...</div>;
  }

  return (
    <div className="min-h-screen p-8 bg-gray-900 text-gray-100">
      <h1 className="text-3xl font-bold mb-6">Operations Reports</h1>
      {reports.length === 0 ? (
        <p>No operations reports available.</p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {reports.map((report) => (
            <div
              key={report.id}
              className="p-4 bg-gray-800 rounded shadow text-gray-100"
            >
              <h2 className="text-xl font-semibold mb-2">{report.title}</h2>
              <p className="text-sm text-gray-400 mb-2">
                {new Date(report.date).toLocaleDateString()}
              </p>
              <p>{report.summary}</p>
              <Link
                href={`/reports/operations/${report.id}`}
                className="text-blue-500 hover:underline mt-2 block"
              >
                View Full Report
              </Link>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default OperationsReportsPage;


File: ./app/reports/finance/[id]/page.tsx
"use client";

import { useParams } from "next/navigation";
import React, { useEffect, useState } from "react";

interface FinanceReport {
  id: number;
  title: string;
  date: string;
  content: string;
}

const FinanceReportDetails: React.FC = () => {
  const params = useParams();
  const { id } = params;
  const [report, setReport] = useState<FinanceReport | null>(null);

  useEffect(() => {
    const fetchReport = async () => {
      try {
        const response = await fetch(`/api/reports/finance/${id}`);
        if (response.ok) {
          const data = await response.json();
          setReport(data);
        } else {
          console.error("Failed to fetch finance report");
        }
      } catch (error) {
        console.error("Error fetching finance report:", error);
      }
    };

    if (id) {
      fetchReport();
    }
  }, [id]);

  if (!report) {
    return <div>Loading report...</div>;
  }

  return (
    <div className="min-h-screen p-8 bg-gray-900 text-gray-100">
      <h1 className="text-3xl font-bold mb-4">{report.title}</h1>
      <p className="text-sm text-gray-400 mb-2">
        {new Date(report.date).toLocaleDateString()}
      </p>
      <div className="prose">{report.content}</div>
    </div>
  );
};

export default FinanceReportDetails;


File: ./app/reports/finance/page.tsx
"use client";

import React, { useEffect, useState } from "react";
import Link from "next/link";

interface FinanceReport {
  id: number;
  title: string;
  date: string;
  summary: string;
}

const FinanceReportsPage: React.FC = () => {
  const [reports, setReports] = useState<FinanceReport[]>([]);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    const fetchReports = async () => {
      try {
        const response = await fetch("/api/reports/finance");
        if (response.ok) {
          const data = await response.json();
          setReports(data);
        } else {
          console.error("Failed to fetch finance reports");
        }
      } catch (error) {
        console.error("Error fetching finance reports:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchReports();
  }, []);

  if (loading) {
    return <div>Loading finance reports...</div>;
  }

  return (
    <div className="min-h-screen p-8 bg-gray-900 text-gray-100">
      <h1 className="text-3xl font-bold mb-6">Finance Reports</h1>
      {reports.length === 0 ? (
        <p>No finance reports available.</p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {reports.map((report) => (
            <div
              key={report.id}
              className="p-4 bg-gray-800 rounded shadow text-gray-100"
            >
              <h2 className="text-xl font-semibold mb-2">{report.title}</h2>
              <p className="text-sm text-gray-400 mb-2">
                {new Date(report.date).toLocaleDateString()}
              </p>
              <p>{report.summary}</p>
              <Link
                href={`/reports/finance/${report.id}`}
                className="text-blue-500 hover:underline mt-2 block"
              >
                View Full Report
              </Link>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default FinanceReportsPage;


File: ./components/RequestForm.tsx
import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";

interface RequestFormProps {
  prefillData?: {
    reportType: string;
    priority: string;
    description: string;
  };
}

const RequestForm: React.FC<RequestFormProps> = ({ prefillData }) => {
  const {
    register,
    handleSubmit,
    setValue,
    formState: { errors },
  } = useForm();
  const [step, setStep] = useState(1);
  const [reportType, setReportType] = useState("");

  useEffect(() => {
    if (prefillData) {
      Object.entries(prefillData).forEach(([key, value]) => {
        setValue(key, value);
      });
    }
  }, [prefillData, setValue]);

  const onSubmit = async (data) => {
    try {
      const response = await fetch("/api/requests", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });
      if (response.ok) {
        alert("Request submitted successfully!");
        // Optionally, reset the form or redirect the user
      } else {
        alert("Failed to submit request.");
      }
    } catch (error) {
      console.error("Error submitting request:", error);
      alert("An error occurred while submitting your request.");
    }
  };

  const nextStep = () => setStep((prev) => prev + 1);
  const prevStep = () => setStep((prev) => prev - 1);

  return (
    <form
      onSubmit={handleSubmit(onSubmit)}
      className="p-6 bg-gray-800 rounded shadow-lg text-gray-100"
    >
      {/* Step Indicators */}
      <div className="flex justify-between mb-6">
        <div
          className={`text-center ${
            step === 1 ? "text-blue-600" : "text-gray-400"
          }`}
        >
          <div className="w-8 h-8 mx-auto rounded-full border-2 flex items-center justify-center">
            1
          </div>
          <p className="mt-2">Basic Info</p>
        </div>
        <div
          className={`text-center ${
            step === 2 ? "text-blue-600" : "text-gray-400"
          }`}
        >
          <div className="w-8 h-8 mx-auto rounded-full border-2 flex items-center justify-center">
            2
          </div>
          <p className="mt-2">Details</p>
        </div>
        <div
          className={`text-center ${
            step === 3 ? "text-blue-600" : "text-gray-400"
          }`}
        >
          <div className="w-8 h-8 mx-auto rounded-full border-2 flex items-center justify-center">
            3
          </div>
          <p className="mt-2">Contact Info</p>
        </div>
      </div>

      {step === 1 && (
        <>
          <h2 className="text-2xl font-bold mb-4">Step 1: Basic Information</h2>
          <div className="mb-4">
            <label className="block mb-2">Report Type</label>
            <select
              {...register("reportType", {
                required: "Report Type is required",
              })}
              className="w-full p-2 border border-gray-600 rounded bg-gray-700 text-white"
              onChange={(e) => {
                setReportType(e.target.value);
                setValue("reportType", e.target.value);
              }}
            >
              <option value="">Select Report Type</option>
              <option value="sales">Sales Report</option>
              <option value="finance">Financial Report</option>
              <option value="operations">Operations Report</option>
            </select>
            {errors.reportType && (
              <p className="text-red-500">{errors.reportType.message}</p>
            )}
          </div>
          {/* Priority Field */}
          <div className="mb-4">
            <label className="block mb-2">Priority</label>
            <select
              {...register("priority", { required: "Priority is required" })}
              className="w-full p-2 border border-gray-600 rounded bg-gray-700 text-white"
            >
              <option value="">Select Priority</option>
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
            </select>
            {errors.priority && (
              <p className="text-red-500">{errors.priority.message}</p>
            )}
          </div>
          <button
            type="button"
            onClick={nextStep}
            className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition duration-300"
          >
            Next
          </button>
        </>
      )}

      {step === 2 && (
        <>
          <h2 className="text-2xl font-bold mb-4">Step 2: Details</h2>
          <div className="mb-4">
            <label className="block mb-2">Description</label>
            <textarea
              {...register("description", {
                required: "Description is required",
              })}
              className="w-full p-2 border border-gray-600 rounded bg-gray-700 text-white"
              rows={4}
            ></textarea>
            {errors.description && (
              <p className="text-red-500">{errors.description.message}</p>
            )}
          </div>
          {/* Conditional Field */}
          {reportType === "operations" && (
            <div className="mb-4">
              <label className="block mb-2">Operations Specific Field</label>
              <input
                {...register("operationsField", {
                  required: "This field is required for Operations Report",
                })}
                className="w-full p-2 border border-gray-600 rounded bg-gray-700 text-white"
                type="text"
              />
              {errors.operationsField && (
                <p className="text-red-500">{errors.operationsField.message}</p>
              )}
            </div>
          )}
          <div className="mb-4">
            <label className="block mb-2">Attachments</label>
            <input
              type="file"
              {...register("attachments")}
              className="w-full p-2 border border-gray-600 rounded bg-gray-700 text-white"
              multiple
            />
          </div>
          <div className="space-x-4">
            <button
              type="button"
              onClick={prevStep}
              className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded transition duration-300"
            >
              Back
            </button>
            <button
              type="button"
              onClick={nextStep}
              className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition duration-300"
            >
              Next
            </button>
          </div>
        </>
      )}

      {step === 3 && (
        <>
          <h2 className="text-2xl font-bold mb-4">
            Step 3: Contact Information
          </h2>
          {/* Name Field */}
          <div className="mb-4">
            <label className="block mb-2">Name</label>
            <input
              {...register("name", { required: "Name is required" })}
              className="w-full p-2 border border-gray-600 rounded bg-gray-700 text-white"
              type="text"
            />
            {errors.name && (
              <p className="text-red-500">{errors.name.message}</p>
            )}
          </div>
          {/* Email Field */}
          <div className="mb-4">
            <label className="block mb-2">Email</label>
            <input
              {...register("email", {
                required: "Email is required",
                pattern: {
                  value: /^\S+@\S+$/i,
                  message: "Invalid email address",
                },
              })}
              className="w-full p-2 border border-gray-600 rounded bg-gray-700 text-white"
              type="email"
            />
            {errors.email && (
              <p className="text-red-500">{errors.email.message}</p>
            )}
          </div>
          {/* Phone Field */}
          <div className="mb-4">
            <label className="block mb-2">Phone Number</label>
            <input
              {...register("phone", {
                required: "Phone number is required",
                pattern: {
                  value: /^\d{10,15}$/,
                  message: "Invalid phone number",
                },
              })}
              className="w-full p-2 border border-gray-600 rounded bg-gray-700 text-white"
              type="tel"
            />
            {errors.phone && (
              <p className="text-red-500">{errors.phone.message}</p>
            )}
          </div>
          <div className="space-x-4">
            <button
              type="button"
              onClick={prevStep}
              className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded transition duration-300"
            >
              Back
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded transition duration-300"
            >
              Submit Request
            </button>
          </div>
        </>
      )}
    </form>
  );
};

export default RequestForm;


File: ./components/Navbar.tsx
"use client";

import Link from "next/link";
import { useState } from "react";

const Navbar = () => {
  const [isOpen, setIsOpen] = useState(false);

  const closeDropdown = () => {
    setIsOpen(false);
  };

  return (
    <nav className="bg-gray-800 shadow p-4">
      <div className="container mx-auto flex justify-between items-center">
        <Link href="/" className="text-xl font-bold text-gray-100">
          Executive Reporting Hub
        </Link>
        <div className="hidden md:flex space-x-4 items-center">
          <Link href="/request" className="text-gray-300 hover:text-gray-100">
            Submit Request
          </Link>
          <div className="relative">
            <button
              onClick={() => setIsOpen(!isOpen)}
              className="text-gray-300 hover:text-gray-100"
            >
              Reports ▼
            </button>
            {isOpen && (
              <div className="absolute right-0 mt-2 w-48 bg-gray-700 rounded-md shadow-lg py-1">
                <Link
                  href="/reports/sales"
                  className="block px-4 py-2 text-sm text-gray-100 hover:bg-gray-600"
                  onClick={closeDropdown}
                >
                  Sales Reports
                </Link>
                <Link
                  href="/reports/finance"
                  className="block px-4 py-2 text-sm text-gray-100 hover:bg-gray-600"
                  onClick={closeDropdown}
                >
                  Financial Reports
                </Link>
                <Link
                  href="/reports/operations"
                  className="block px-4 py-2 text-sm text-gray-100 hover:bg-gray-600"
                  onClick={closeDropdown}
                >
                  Operations Reports
                </Link>
              </div>
            )}
          </div>
          <Link href="/dashboard" className="text-gray-300 hover:text-gray-100">
            Dashboard
          </Link>
          <input
            type="search"
            placeholder="Search reports..."
            className="px-2 py-1 border rounded bg-gray-700 text-gray-100"
          />
        </div>
      </div>
    </nav>
  );
};

export default Navbar;


File: ./components/SummaryMetrics.tsx
"use client";

import React, { useEffect, useState } from "react";

const SummaryMetrics: React.FC = () => {
  const [metrics, setMetrics] = useState([
    { label: "Total Reports", value: 0 },
    { label: "Pending Requests", value: 0 },
    { label: "Completed This Month", value: 0 },
    { label: "Average Turnaround Time", value: "N/A" },
  ]);

  useEffect(() => {
    const fetchMetrics = async () => {
      try {
        const response = await fetch("/api/metrics");
        if (response.ok) {
          const data = await response.json();
          setMetrics(data);
        } else {
          console.error("Failed to fetch metrics");
        }
      } catch (error) {
        console.error("Error fetching metrics:", error);
      }
    };

    fetchMetrics();
  }, []);

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 bg-gray-800">
      {metrics.map((metric, index) => (
        <div key={index} className="p-4 rounded-lg shadow">
          <h3 className="text-lg font-semibold text-gray-100">
            {metric.label}
          </h3>
          <p className="text-3xl font-bold mt-2 text-gray-100">
            {metric.value}
          </p>
        </div>
      ))}
    </div>
  );
};

export default SummaryMetrics;


File: ./components/QuickAccess.tsx
import React from "react";
import Link from "next/link";

const QuickAccess: React.FC = () => {
  const quickLinks = [
    { label: "New Report Request", href: "/request" },
    { label: "View All Reports", href: "/reports" },
    { label: "Financial Dashboard", href: "/dashboard/financial" },
    { label: "Sales Overview", href: "/dashboard/sales" },
  ];

  return (
    <div className="p-4 rounded-lg shadow mb-6">
      <h2 className="text-xl font-semibold mb-4">Quick Access</h2>
      <div className="space-y-2">
        {quickLinks.map((link, index) => (
          <Link
            key={index}
            href={link.href}
            className="block w-full text-left px-4 py-2 hover:bg-gray-800 rounded transition duration-300"
          >
            {link.label}
          </Link>
        ))}
      </div>
    </div>
  );
};

export default QuickAccess;


File: ./components/CommunicationThread.tsx
// File: ./components/CommunicationThread.tsx
"use client";

import React, { useState, useEffect } from "react";

interface Message {
  sender: "User" | "Analyst";
  content: string;
  timestamp: string;
}

interface Props {
  requestId: number;
}

const CommunicationThread: React.FC<Props> = ({ requestId }) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState("");

  useEffect(() => {
    const fetchMessages = async () => {
      try {
        const response = await fetch(`/api/requests/${requestId}/messages`);
        if (response.ok) {
          const data = await response.json();
          setMessages(data);
        } else {
          console.error("Failed to fetch messages");
        }
      } catch (error) {
        console.error("Error fetching messages:", error);
      }
    };

    fetchMessages();
  }, [requestId]);

  const handleSend = async () => {
    const message = {
      sender: "User",
      content: newMessage,
    };

    try {
      const response = await fetch(`/api/requests/${requestId}/messages`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(message),
      });

      if (response.ok) {
        const savedMessage = await response.json();
        setMessages([...messages, savedMessage]);
        setNewMessage("");
      } else {
        console.error("Failed to send message");
      }
    } catch (error) {
      console.error("Error sending message:", error);
    }
  };

  return (
    <div className="p-4 bg-gray-800 rounded shadow">
      <h2 className="text-xl mb-4">Communication Thread</h2>
      <div className="mb-4 max-h-64 overflow-y-auto">
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`mb-2 ${
              msg.sender === "User" ? "text-right" : "text-left"
            }`}
          >
            <p className="inline-block p-2 rounded bg-gray-700">
              {msg.content}
            </p>
            <span className="block text-xs text-gray-500">
              {new Date(msg.timestamp).toLocaleString()}
            </span>
          </div>
        ))}
      </div>
      <div className="flex">
        <input
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          className="flex-grow p-2 border rounded-l bg-gray-700 text-white"
          placeholder="Type a message"
        />
        <button
          onClick={handleSend}
          className="px-4 bg-blue-500 text-white rounded-r"
        >
          Send
        </button>
      </div>
    </div>
  );
};

export default CommunicationThread;


File: ./components/StatusDashboard.tsx
"use client";

import React, { useEffect, useState } from "react";
import Link from "next/link";

interface StatusUpdate {
  status: string;
  timestamp: string;
}

interface Request {
  id: number;
  reportType: string;
  status: string;
  statusHistory: StatusUpdate[]; // Add statusHistory field
}

const StatusDashboard = () => {
  const [requests, setRequests] = useState<Request[]>([]);

  useEffect(() => {
    const fetchRequests = async () => {
      try {
        const response = await fetch("/api/requests");
        if (response.ok) {
          const data = await response.json();
          setRequests(data);
        } else {
          console.error("Failed to fetch requests");
        }
      } catch (error) {
        console.error("Error fetching requests:", error);
      }
    };

    fetchRequests();

    const interval = setInterval(fetchRequests, 5000); // Poll every 5 seconds

    return () => clearInterval(interval);
  }, []);

  return (
    <div className="p-4 rounded shadow">
      <h2 className="text-xl mb-4">Your Requests</h2>
      <table className="w-full">
        <thead>
          <tr>
            <th>Report Type</th>
            <th>Status</th>
            <th>Last Update</th> {/* Add Last Update column */}
          </tr>
        </thead>
        <tbody>
          {requests.map((req) => (
            <tr key={req.id}>
              <td>
                <Link
                  href={`/requests/${req.id}`}
                  className="text-blue-500 hover:underline"
                >
                  {req.reportType}
                </Link>
              </td>
              <td>{req.status}</td>
              <td>
                {/* Show last status update time */}
                {req.statusHistory && req.statusHistory.length > 0
                  ? new Date(
                      req.statusHistory[req.statusHistory.length - 1].timestamp
                    ).toLocaleString()
                  : "N/A"}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default StatusDashboard;


File: ./components/TemplateGallery.tsx
import React from "react";

const templates = [
  {
    name: "Monthly Sales Report",
    description: "Detailed sales figures for the month.",
    fields: {
      reportType: "Sales Report",
      priority: "Medium",
      description: "Please provide the monthly sales data.",
    },
  },
  // Add more templates as needed
];

const TemplateGallery = ({ onSelectTemplate }) => {
  return (
    <div className="p-4 rounded shadow">
      <h2 className="text-xl mb-4">Template Gallery</h2>
      <div className="grid grid-cols-1 gap-4">
        {templates.map((template, index) => (
          <div key={index} className="p-4 border rounded">
            <h3 className="text-lg">{template.name}</h3>
            <p className="text-sm text-gray-600">{template.description}</p>
            <button
              onClick={() => onSelectTemplate(template.fields)}
              className="mt-2 px-4 py-2 bg-green-500 text-white rounded"
            >
              Use Template
            </button>
          </div>
        ))}
      </div>
    </div>
  );
};

export default TemplateGallery;



Project Directory Tree:
README.md
app/
  app/api/
    app/api/metrics/
      app/api/metrics/route.ts
    app/api/reports/
      app/api/reports/finance/
        app/api/reports/finance/[id]/
          app/api/reports/finance/[id]/route.ts
        app/api/reports/finance/route.ts
      app/api/reports/operations/
        app/api/reports/operations/[id]/
          app/api/reports/operations/[id]/route.ts
        app/api/reports/operations/route.ts
      app/api/reports/sales/
        app/api/reports/sales/[id]/
          app/api/reports/sales/[id]/route.ts
        app/api/reports/sales/route.ts
    app/api/requests/
      app/api/requests/[id]/
        app/api/requests/[id]/messages/
          app/api/requests/[id]/messages/route.ts
        app/api/requests/[id]/route.ts
      app/api/requests/route.ts
  app/dashboard/
    app/dashboard/page.tsx
  app/favicon.ico
  app/fonts/
    app/fonts/GeistMonoVF.woff
    app/fonts/GeistVF.woff
  app/globals.css
  app/layout.tsx
  app/page.tsx
  app/reports/
    app/reports/finance/
      app/reports/finance/[id]/
        app/reports/finance/[id]/page.tsx
      app/reports/finance/page.tsx
    app/reports/operations/
      app/reports/operations/[id]/
        app/reports/operations/[id]/page.tsx
      app/reports/operations/page.tsx
    app/reports/sales/
      app/reports/sales/[id]/
        app/reports/sales/[id]/page.tsx
      app/reports/sales/page.tsx
  app/request/
    app/request/page.tsx
  app/requests/
    app/requests/[id].tsx
components/
  components/CommunicationThread.tsx
  components/Navbar.tsx
  components/QuickAccess.tsx
  components/RequestForm.tsx
  components/StatusDashboard.tsx
  components/SummaryMetrics.tsx
  components/TemplateGallery.tsx
concat_netlify.sh
data/
  data/financeReports.json
  data/operationsReports.json
  data/requests.json
  data/salesReports.json
next-env.d.ts
next.config.mjs
package-lock.json
package.json
parse.txt
postcss.config.mjs
tailwind.config.ts
tsconfig.json
